<?xml version="1.0" encoding="utf-8" ?>
<Defs>

  <QuestScriptDef>
    <defName>ThreatReward_Manhunters_ItemPod</defName>
    <rootSelectionWeight>0.7</rootSelectionWeight>
    <rootMinPoints>0</rootMinPoints>
    <rootMinProgressScore>4</rootMinProgressScore>
    <expireDaysRange>1~2</expireDaysRange>
    <canGiveRoyalFavor>true</canGiveRoyalFavor>
    <questNameRules>
      <rulesStrings>
        <li>questName(animalCount==1)->The [AdjectiveBadass] [beast]</li>
        <li>questName(animalCount==1)->A [AdjectiveBadass] [beast]</li>
        <li>questName(animalCount==1)->[AdjectiveBadass] [beast]</li>
        <li>questName(animalCount>=2)->The [AdjectiveBadass] [beasts]</li>
        <li>questName(animalCount>=2)->[AdjectiveBadass] [beasts]</li>

        <li>beast(p=4)->[animalKind_label]</li>
        <li>beast->beast</li>
        <li>beast->animal</li>

        <li>beasts(p=4)->[animalKind_labelPlural]</li>
        <li>beasts->beasts</li>
        <li>beasts->animals</li>
      </rulesStrings>
    </questNameRules>
    <questDescriptionRules>
      <rulesStrings>

        <!-- General use -->
        <li>animalKindLabelCorrect(animalCount==1)->[animalKind_label]</li>
        <li>animalKindLabelCorrect(animalCount>=2)->[animalKind_labelPlural]</li>
        <li>manhuntingBeastIndef(animalCount==1)->a (*Threat)manhunting [animalKind_label](/Threat)</li>
        <li>manhuntingBeastIndef(animalCount>=2)->a pack of (*Threat)[animalCount] manhunting [animalKind_labelPlural](/Threat)</li>
        <li>endSection->[helpersParagraph]The [animalKindLabelCorrect] will arrive at [map_definite] [manhuntersDelayTicks_duration] after you accept.</li>

        <!-- Asker is null, single animal -->
        <li>questDescription(askerIsNull==true,animalCount==1)->A trader is calling. (*Threat)A wild [animalKind_label](/Threat) is hunting him! He wants your help to draw the beast away from him.[endSection]</li>
        <li>manhunterArrivalLetterEnd(askerIsNull==true,animalCount==1)->The [animalKind_label] was hunting a nearby trader.</li>

        <!-- Asker is null, multiple animals -->
        <li>questDescription(askerIsNull==true,animalCount>=2)->A trader is calling. A pack of (*Threat)[animalCount] wild [animalKind_labelPlural](/Threat) are hunting him! He wants your help to draw the animals away from him.[endSection]</li>
        <li>manhunterArrivalLetterEnd(askerIsNull==true,animalCount>=2)->The [animalKind_labelPlural] were hunting a nearby trader.</li>

        <!-- Asker is faction leader, single animal OR multiple animals -->
        <li>questDescription(asker_factionLeader==True)->Caravans of [asker_faction_name] are being harassed by [manhuntingBeastIndef]. [asker_faction_leaderTitle] [asker_nameFull] wants your help to draw the beasts away from the caravans.[endSection]</li>
        <li>manhunterArrivalLetterEnd(asker_factionLeader==True,animalCount==1)->The [animalKind_label] was harassing caravans from [asker_faction_name].</li>
        <li>manhunterArrivalLetterEnd(asker_factionLeader==True,animalCount>=2)->The [animalKind_labelPlural] were harassing caravans from [asker_faction_name].</li>

        <!-- Asker is royal, single animal -->
        <li>questDescription(asker_royalInCurrentFaction==True,animalCount==1)->[asker_nameFull], a [asker_royalTitleInCurrentFaction] of [asker_faction_name], recently lost a scout to (*Threat)a manhunting [animalKind_label](/Threat). [asker_pronoun] wants to draw it towards you to be killed, to uphold [asker_possessive] honor.[endSection]</li>
        <li>manhunterArrivalLetterEnd(asker_royalInCurrentFaction==True,animalCount==1)->This is the [animalKind_label] that killed the scout of the [asker_royalTitleInCurrentFaction] [asker_nameFull] of [asker_faction_name].</li>

        <!-- Asker is royal, multiple animals -->
        <li>questDescription(asker_royalInCurrentFaction==True,animalCount>=2)->[asker_nameFull], a [asker_royalTitleInCurrentFaction] of [asker_faction_name], recently lost a scouting party to a pack of (*Threat)[animalCount] manhunting [animalKind_labelPlural](/Threat). [asker_pronoun] wants to draw the beasts towards you to be killed, to uphold [asker_possessive] honor.[endSection]</li>
        <li>manhunterArrivalLetterEnd(asker_royalInCurrentFaction==True,animalCount>=2)->These are the [animalKind_labelPlural] that killed the scouting party of the [asker_royalTitleInCurrentFaction] [asker_nameFull] of [asker_faction_name].</li>
        
      </rulesStrings>
    </questDescriptionRules>
    <root Class="QuestNode_Sequence">
      <nodes>
        <li Class="QuestNode_SubScript">
          <def>Util_RandomizePointsChallengeRating</def>
        </li>
        <li Class="QuestNode_GetMap" />

        <!-- Choose asker -->
        <li Class="QuestNode_SubScript">
          <def>Util_DecideRandomAsker</def>
        </li>

        <!-- Note that we generate the reward value from the input points after challenge rating is applied, but before helper points are added
             We could try to change this to some curve based on the animals generated, but it's not clear how to apply helper points to that and it
             may not be necessary to get that complex. -->
        <li Class="QuestNode_SubScript">
          <def>Util_GetDefaultRewardValueFromPoints</def>
        </li>

        <!-- Helpers -->
        <li Class="QuestNode_SubScript">
          <def>Util_MaybeGenerateHelpers</def>
          <parms>
            <helpersChance>0.4</helpersChance>
            <sendArrivalLetter>true</sendArrivalLetter>
          </parms>
        </li>
        <!-- Add helpers power to points -->
        <li Class="QuestNode_Set">
          <name>points</name>
          <value>$($points + $helpersPoints)</value>
        </li>
        
        <!-- Manhunter pack -->
        <li Class="QuestNode_Set">
          <name>signalTag</name>
          <value>manhunter</value>
        </li>
        <li Class="QuestNode_Set">
          <name>manhuntersDelayTicks</name>
          <value>$(roundToTicksRough(randInt(300, 60000)))</value>
        </li>
        <li Class="QuestNode_Delay">
          <delayTicks>$manhuntersDelayTicks</delayTicks>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_ManhunterPack">
                <tag>$signalTag</tag>
                <customLetterText TKey="LetterTextManhunterArrival">{BASETEXT}\n\n[manhunterArrivalLetterEnd]</customLetterText>
              </li>
              <li Class="QuestNode_SendSignals">
                <outSignals>ManhuntersArrived</outSignals>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Track manhunters mental state -->
        <li Class="QuestNode_TrackWhenExitMentalState">
          <tag>$signalTag</tag>
          <mentalStateDef>ManhunterPermanent</mentalStateDef>
          <inSignals>
            <li>$signalTag.Despawned</li>
            <li>$signalTag.ExitMentalState</li>
          </inSignals>
          <outSignal>ManhuntersNeutralized</outSignal>
        </li>

        <!-- End -->
        <li Class="QuestNode_AllSignals">
          <inSignals>
            <li>ManhuntersArrived</li>
            <li>ManhuntersNeutralized</li>
          </inSignals>
          <node Class="QuestNode_Delay">
            <delayTicks>300</delayTicks>
            <node Class="QuestNode_Sequence">
              <nodes>
                <li Class="QuestNode_GiveRewards">
                  <parms>
                    <allowGoodwill>true</allowGoodwill>
                    <allowRoyalFavor>true</allowRoyalFavor>
                    <thingRewardRequired>true</thingRewardRequired>
                    <thingRewardItemsOnly>true</thingRewardItemsOnly>
                  </parms>
                </li>
                <li Class="QuestNode_End" />
              </nodes>
            </node>
          </node>
        </li>
      </nodes>
    </root>
  </QuestScriptDef>

  <QuestScriptDef>
    <defName>ThreatReward_Infestation_ItemPod</defName>
    <rootSelectionWeight>1.0</rootSelectionWeight>
    <rootMinPoints>220</rootMinPoints> <!-- Cost of 1 hive -->
    <rootMinProgressScore>4</rootMinProgressScore>
    <expireDaysRange>4~8</expireDaysRange>
    <canGiveRoyalFavor>true</canGiveRoyalFavor>
    <questNameRules>
      <rulesStrings>
        <li>questName->Pods and [insects]</li>
        <li>questName->[asker_nameDef]'s [insects]</li>
        <li>questName->The [itemPodsTotalMarketValue_money] [insects]</li>
        <li>questName(asker_royalInCurrentFaction==True)->Spectacle of [insects]</li>
        <li>questName(p=0.3)->Podswarm</li>

        <li>insects->insects</li>
        <li>insects->bugs</li>
        <li>insects->hives</li>
      </rulesStrings>
    </questNameRules>
    <questDescriptionRules>
      <rulesStrings>

        <!-- Asker is null -->
        <li>questDescription(askerIsNull==true)->An orbiting research ship wants to test a new type of insect pheromone. If you agree, they'll sweep [map_definite] with the pheromone, provoking (*Threat)an infestation of [hivesCount] hives(/Threat).[helpersParagraph]</li>
        <li>infestationArrivalLetterText(askerIsNull==true)->The hives were attracted by a pheromone sweep from an orbiting research ship.</li>

        <!-- Asker is faction leader -->
        <li>questDescription(asker_factionLeader==True)->[asker_nameFull], [asker_faction_leaderTitle] of [asker_faction_name], is facing repeated infestations at sites near [map_definite]. [asker_pronoun] wants to draw the infestations to you. This will provoke (*Threat)an infestation of [hivesCount] hives(/Threat).[helpersParagraph]</li>
        <li>infestationArrivalLetterText(asker_factionLeader==True)->The hives were originally infesting nearby sites belonging to [asker_nameFull] of [asker_faction_name].</li>
  
        <!-- Asker is royal -->
        <li>questDescription(asker_royalInCurrentFaction==True)->[asker_nameFull], a [asker_royalTitleInCurrentFaction] of [asker_faction_name], is having trouble landing near [map_definite] due to repeated infestations. [asker_pronoun] wants to draw the bugs to you to be dealt with. This will provoke (*Threat)an infestation of [hivesCount] hives(/Threat).[helpersParagraph]</li>
        <li>infestationArrivalLetterText(asker_royalInCurrentFaction==True)->The infestation was drawn to you by [asker_nameFull], a [asker_royalTitleInCurrentFaction] of [asker_faction_name].</li>

      </rulesStrings>
    </questDescriptionRules>
    <root Class="QuestNode_Sequence">
      <nodes>
        <li Class="QuestNode_SubScript">
          <def>Util_RandomizePointsChallengeRating</def>
        </li>
        <li Class="QuestNode_GetMap">
          <mustBeInfestable>true</mustBeInfestable>
        </li>

        <!-- Choose asker -->
        <li Class="QuestNode_SubScript">
          <def>Util_DecideRandomAsker</def>
        </li>

        <!-- Note that we generate the reward value from the input points after challenge rating is applied, but before helper points are added
             We could try to change this to some curve based on the number of hives generated, but it's not clear how to apply helper points to that and it
             may not be necessary to get that complex. -->
        <li Class="QuestNode_SubScript">
          <def>Util_GetDefaultRewardValueFromPoints</def>
        </li>

        <!-- Helpers -->
        <li Class="QuestNode_SubScript">
          <def>Util_MaybeGenerateHelpers</def>
          <parms>
            <helpersChance>0.4</helpersChance>
            <sendArrivalLetter>true</sendArrivalLetter>
          </parms>
        </li>
        <li Class="QuestNode_Set">
          <name>points</name>
          <value>$($points + $helpersPoints)</value>
        </li>

        <!-- Start infestation after delay -->
        <li Class="QuestNode_Delay">
          <delayTicks>$(randInt(720,1200))</delayTicks>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_SubScript">
                <def>Util_Infestation</def>
                <parms>
                  <tag>infestation</tag>
                  <customLetterText TKey="LetterTextInfestationArrived">{BASETEXT}\n\n[infestationArrivalLetterText]</customLetterText>
                </parms>
              </li>
              <li Class="QuestNode_SendSignals">
                <outSignals>InfestationStarted</outSignals>
              </li>
            </nodes>
          </node>
        </li>

        <!-- End -->
        <li Class="QuestNode_AllSignals">
          <inSignals>
            <li>InfestationStarted</li>
            <li>infestation.AllHivesDestroyed</li>
          </inSignals>
          <node Class="QuestNode_Delay">
            <delayTicks>300</delayTicks>
            <node Class="QuestNode_Sequence">
              <nodes>
                <li Class="QuestNode_GiveRewards">
                  <parms>
                    <allowGoodwill>true</allowGoodwill>
                    <allowRoyalFavor>true</allowRoyalFavor>
                    <thingRewardRequired>true</thingRewardRequired>
                    <thingRewardItemsOnly>true</thingRewardItemsOnly>
                  </parms>
                </li>
                <li Class="QuestNode_End" />
              </nodes>
            </node>
          </node>
        </li>
      </nodes>
    </root>
  </QuestScriptDef>

  <QuestScriptDef>
    <defName>ThreatReward_GameCondition_ItemPod</defName>
    <rootSelectionWeight>0.7</rootSelectionWeight>
    <rootMinPoints>0</rootMinPoints>
    <expireDaysRange>4~8</expireDaysRange>
    <canGiveRoyalFavor>true</canGiveRoyalFavor>
    <questNameRules>
      <rulesStrings>
        <li>questName->[asker_nameDef]'s [gameCondition_label]</li>
        <li>questName->[gameCondition_indefinite] for [asker_nameDef]</li>
        <li>questName->Paid [gameCondition_label]</li>
        <li>questName->[gameCondition_label] for Pay</li>
      </rulesStrings>
    </questNameRules>
    <questDescriptionRules>
      <rulesStrings>

        <!-- Asker is null -->
        <li>questDescription(askerIsNull==true)->A machine persona in an orbiting ship wants to perform some planetary experiments. However, if she carries out her experiment, [gameConditionDescriptionFuture].\n\nShe is concerned about getting in trouble with the ethical review board, and is asking for your consent.</li>

        <!-- Asker is faction leader -->
        <li>questDescription(asker_factionLeader==True)->A vengeful machine persona is threatening the [asker_faction_pawnsPlural] of [asker_faction_name]. [asker_faction_leaderTitle] [asker_nameFull] wants you to send a message to the persona accepting responsibility for their transgressions.\n\nIf you do, the persona will turn its anger on you. [gameConditionDescriptionFuture].</li>

        <!-- Asker is royal -->
        <li>questDescription(asker_royalInCurrentFaction==True)->[asker_nameFull], a [asker_royalTitleInCurrentFaction] of [asker_faction_name], wants to perform a low-power test of one of [asker_possessive] ship's area-attack weapons. If [asker_pronoun] does, [gameConditionDescriptionFuture].\n\nSince you are a local landholder under imperial law, [asker_nameDef] needs your honorable permission to proceed.</li>
        
      </rulesStrings>
    </questDescriptionRules>
    <root Class="QuestNode_Sequence">
      <nodes>
        <li Class="QuestNode_SubScript">
          <def>Util_RandomizePointsChallengeRating</def>
          <parms>
            <selectionWeightOneStar>0.4</selectionWeightOneStar>
            <selectionWeightTwoStar>0.3</selectionWeightTwoStar>
            <selectionWeightThreeStar>0.3</selectionWeightThreeStar>
            <pointsFactorTwoStar>1</pointsFactorTwoStar> <!-- Don't change points -->
            <pointsFactorThreeStar>1</pointsFactorThreeStar>
            <minPointsTwoStar>400</minPointsTwoStar>
            <minPointsThreeStar>600</minPointsThreeStar>
          </parms>
        </li>
        <li Class="QuestNode_GetMap" />

        <!-- Choose asker -->
        <li Class="QuestNode_SubScript">
          <def>Util_DecideRandomAsker</def>
        </li>

        <!-- Begin the game condition after delay -->
        <li Class="QuestNode_Delay">
          <delayTicks>600</delayTicks>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_SubScript">
                <def>Util_GameConditionNegativeRandom</def>
              </li>
              <li Class="QuestNode_SendSignals">
                <outSignals>GameConditionStarted</outSignals>
              </li>
            </nodes>
          </node>
      </li>

        <!-- Calculate reward value
             Note the reward value is curved by points, but the challenge ignores points
             This is because any colony can take nearly any condition, but conditions do more damage to big colonies -->
        <li Class="QuestNode_EvaluateSimpleCurve">
          <value>$points</value>
          <storeAs>pointsRewardFactor</storeAs>
          <curve>
            <points>
              <li>300,  0.5</li>
              <li>1200, 1.0</li>
              <li>2400, 1.5</li>
              <li>5000, 2.0</li>
            </points>
          </curve>
        </li>
        <li Class="QuestNode_Set">
          <name>rewardValue</name>
          <value>$($gameConditionDifficulty * ($gameConditionDuration / 60000) * $pointsRewardFactor * 200)</value>
        </li>

        <!-- Give reward after delay -->
        <li Class="QuestNode_Delay">
          <delayTicks>1200</delayTicks>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_GiveRewards">
                <parms>
                  <allowGoodwill>true</allowGoodwill>
                  <allowRoyalFavor>true</allowRoyalFavor>
                  <thingRewardRequired>true</thingRewardRequired>
                  <thingRewardItemsOnly>true</thingRewardItemsOnly>
                </parms>
              </li>
              <li Class="QuestNode_SendSignals">
                <outSignals>RewardGiven</outSignals>
              </li>
            </nodes>
          </node>
        </li>

        <!-- End -->
        <li Class="QuestNode_AllSignals">
          <inSignals>
            <li>RewardGiven</li>
            <li>GameConditionStarted</li>
          </inSignals>
          <node Class="QuestNode_End">
            <outcome>Success</outcome>
          </node>
        </li>
      </nodes>
    </root>
  </QuestScriptDef>

  <QuestScriptDef>
    <defName>ThreatReward_SiteThreat_ItemPod</defName>
    <rootSelectionWeight>1.0</rootSelectionWeight>
    <rootMinPoints>350</rootMinPoints>
    <rootMinProgressScore>7</rootMinProgressScore>
    <expireDaysRange>1~2</expireDaysRange>
    <canGiveRoyalFavor>true</canGiveRoyalFavor>
    <questNameRules>
      <rulesStrings>
        <li>questName->[asker_nameDef]'s [site/site_label]</li>
        <li>questName->[site/site_label] for [asker_nameDef]</li>
        <li>questName->Paid [site/site_label]</li>
        <li>questName->[site/site_label] for Pay</li>
      </rulesStrings>
    </questNameRules>
    <questDescriptionRules>
      <rulesStrings>

        <!-- Asker is null -->
        <li>questDescription(askerIsNull==true)->A trader is calling from nearby. [threat] are hunting him! He is asking you to signal them and draw them towards [map_definite] so he can escape.\n\nIf you send the signal, [askerEnemies] will activate a site nearby to harass you. [site/allSitePartsDescriptions] This site will remain until you go destroy it.</li>

        <!-- Asker is faction leader -->
        <li>questDescription(asker_factionLeader==True)->[asker_nameFull], [asker_faction_leaderTitle] of [asker_faction_name], is asking for your help. [askerEnemies] have been harassing [asker_possessive] settlements. [asker_pronoun] wants your help using signals to draw them towards [map_definite] and away from [asker_possessive] people.\n\nIf [asker_pronoun] does, [askerEnemies] will activate a site nearby to harass you. [site/allSitePartsDescriptions] This site will remain until you go destroy it.</li>

        <!-- Asker is royal -->
        <li>questDescription(asker_royalInCurrentFaction==True)->[asker_nameFull], a [asker_royalTitleInCurrentFaction] of [asker_faction_name], is traveling near [map_definite]. [asker_pronoun] is being followed by [threat] and wants your help using signals to draw them towards [map_definite].\n\nIf you do, [askerEnemies] will activate a site nearby to harass you. [site/allSitePartsDescriptions] This site will remain until you go destroy it.</li>

        <li>threat(priority=1,site/Outpost_exists==True)->[site/enemyFaction_pawnsPlural] of [site/enemyFaction_name]</li>
        <li>threat(priority=1,site/MechCluster_exists==True)->mechanoids</li>
        <li>threat(priority=1,site/SleepingMechanoids_exists==True)->mechanoids</li>
        <li>threat->[asker_possessive] enemies</li>
        <li>threat(priority=-1)->his enemies</li>
        <li>askerEnemies(priority=1,site/Outpost_exists==True)->[site/enemyFaction_name]</li>
        <li>askerEnemies(priority=1,site/MechCluster_exists==True)->mechanoids</li>
        <li>askerEnemies(priority=1,site/SleepingMechanoids_exists==True)->mechanoids</li>
        <li>askerEnemies->[asker_possessive] enemies</li>
        <li>askerEnemies(priority=-1)->his enemies</li>
      </rulesStrings>
    </questDescriptionRules>
    <root Class="QuestNode_Sequence">
      <nodes>
        <li Class="QuestNode_SubScript">
          <def>Util_RandomizePointsChallengeRating</def>
          <parms>
            <selectionWeightOneStar>0.4</selectionWeightOneStar>
            <selectionWeightTwoStar>0.35</selectionWeightTwoStar>
            <selectionWeightThreeStar>0.25</selectionWeightThreeStar>
          </parms>
        </li>
        <li Class="QuestNode_GetMap" />

        <!-- Choose asker -->
        <li Class="QuestNode_SubScript">
          <def>Util_DecideRandomAsker</def>
        </li>
        
        <!-- Determine enemy faction -->
        <li Class="QuestNode_GetFaction">
          <storeAs>site/enemyFaction</storeAs>
          <allowEnemy>true</allowEnemy>
          <mustBeHostileToFactionOf>$asker</mustBeHostileToFactionOf>
        </li>

        <!-- Spawn the threat site after delay -->
        <li Class="QuestNode_Delay">
          <delayTicks>600</delayTicks>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_SubScript">
                <def>Util_SpawnSiteThreat</def>
                <prefix>site</prefix>
                <parms>
                  <inSignal>$inSignal</inSignal>
                  <map>$map</map>
                  <points>$points</points>
                  <customLetterText TKey="LetterTextSiteAppeared">[defaultSiteAppearedLetterText]\n\nThis site was set up as a response to your insulting signals.</customLetterText>
                </parms>
              </li>
              <li Class="QuestNode_SendSignals">
                <outSignals>SiteAppeared</outSignals>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Calculate rewardValue -->
        <li Class="QuestNode_GetSiteDisturbanceFactor">
          <storeAs>activeThreatDisturbanceFactor</storeAs>
          <sitePartDefs>$site/sitePartDefs</sitePartDefs>
        </li>
        <li Class="QuestNode_SubScript">
          <def>Util_GetDefaultRewardValueFromPoints</def>
          <parms>
            <!-- Value is reduced because not all points go into real threats, some go into the condition causer
                 But it's then increased because of fighting away from home. -->
            <points>$($points * 0.75 * 1.4)</points>
          </parms>
        </li>
        <li Class="QuestNode_Set">
          <name>rewardValue</name>
          <value>$($rewardValue * $activeThreatDisturbanceFactor)</value>
        </li>

        <!-- Give reward after delay -->
        <li Class="QuestNode_Delay">
        <delayTicks>1200</delayTicks>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_GiveRewards">
                <parms>
                  <allowGoodwill>true</allowGoodwill>
                  <allowRoyalFavor>true</allowRoyalFavor>
                  <thingRewardRequired>true</thingRewardRequired>
                  <thingRewardItemsOnly>true</thingRewardItemsOnly>
                </parms>
              </li>
              <li Class="QuestNode_SendSignals">
                <outSignals>RewardGiven</outSignals>
              </li>
            </nodes>
          </node>
        </li>

        <!-- End -->
        <li Class="QuestNode_AllSignals">
          <inSignals>
            <li>RewardGiven</li>
            <li>SiteAppeared</li>
          </inSignals>
          <node Class="QuestNode_End" />
        </li>
      </nodes>
    </root>
  </QuestScriptDef>

</Defs>