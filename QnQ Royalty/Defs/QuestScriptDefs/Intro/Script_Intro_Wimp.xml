<?xml version="1.0" encoding="utf-8" ?>
<Defs>

  <QuestScriptDef>
    <defName>Intro_Wimp</defName>
    <defaultChallengeRating>1</defaultChallengeRating>
    <expireDaysRange>2</expireDaysRange>
    <isRootSpecial>true</isRootSpecial>
    <defaultCharity>true</defaultCharity>
    <successHistoryEvent MayRequire="Ludeon.RimWorld.Ideology">CharityFulfilled_IntroWimp</successHistoryEvent>
    <failedOrExpiredHistoryEvent MayRequire="Ludeon.RimWorld.Ideology">CharityRefused_IntroWimp</failedOrExpiredHistoryEvent>
    <questNameRules>
      <rulesStrings>
        <li>questName->the [adjAny] [asker_royalTitleInCurrentFaction]</li>

        <!-- Pieces -->
        <li>adjAny->hunted</li>
        <li>adjAny->fleeing</li>
        <li>adjAny->solitary</li>
        <li>adjAny->ambushed</li>

      </rulesStrings>
    </questNameRules>
    <questDescriptionRules>
      <include>
        <li>QuestHospitalityCommon</li>
      </include>
      <rulesStrings>
        <li>questDescription->[asker_nameFull], a [asker_royalTitleInCurrentFaction] of [asker_faction_name] is calling from nearby. [asker_possessive] guards were killed in an ambush. [asker_pronoun] escaped, but is now being followed by (*Threat)a manhunting [animalKindDef_label](/Threat).\n\n[asker_nameDef] wants you to keep [asker_objective] safe at [map_definite] for a few hours until [asker_possessive] shuttle can come pick [asker_objective] up.
\n[asker_pronoun] will bestow [royalFavorReward] [asker_faction_royalFavorLabel] on whoever accepts this quest. This is enough [asker_faction_royalFavorLabel] to receive the royal title of Yeoman, and all benefits that come with it - including the first level of psychic powers.</li>
      </rulesStrings>
    </questDescriptionRules>

    <root Class="QuestNode_Sequence">
      <nodes>
        <li Class="QuestNode_GetMap" />
        <li Class="QuestNode_GetWalkInSpot" />

        <!-- Require honor rewards enabled for this quest to run -->
        <li Class="QuestNode_RequireRoyalFavorFromFaction">
          <faction>Empire</faction>
        </li>

        <!-- Honor reward to accepter -->
        <li Class="QuestNode_Set">
          <name>royalFavorReward</name>
          <value>8</value>
        </li>

        <!-- Generate Asker -->
        <li Class="QuestNode_GeneratePawn">
          <kindDef>Empire_Royal_NobleWimp</kindDef>
          <storeAs>asker</storeAs>
          <faction>Empire</faction>
          <biocodeWeaponChance>1</biocodeWeaponChance>
          <biocodeApparelChance>1</biocodeApparelChance>
          <allowPregnant>false</allowPregnant>
          <forcedTraits>
            <li>Wimp</li>
          </forcedTraits>
        </li>
        <li Class="QuestNode_PawnsArrive">
          <pawns>$asker</pawns>
          <joinPlayer>true</joinPlayer>
        </li>

        <!-- Asker leaves on cleanup -->
        <li Class="QuestNode_LeaveOnCleanup">
          <pawns>$asker</pawns>
          <sendStandardLetter>false</sendStandardLetter>
          <inSignalRemovePawn>asker.RanWild</inSignalRemovePawn>
        </li>

        <!-- Asker never does random mood caused mental breaks -->
        <li Class="QuestNode_DisableRandomMoodCausedMentalBreaks">
          <pawns>$asker</pawns>
        </li>

        <!-- Manhunter animal -->
        <li Class="QuestNode_Set">
          <name>points</name>
          <value>50</value> <!-- Enough points to get a single weak animal -->
        </li>
        <li Class="QuestNode_Delay">
          <delayTicks>1800</delayTicks>
          <node Class="QuestNode_ViolentQuestsAllowed">
            <node Class="QuestNode_ManhunterPack">
              <animalCount>1</animalCount>
              <customLetterLabel TKey="LetterLabelAngryAnimal">Manhunting [animalKindDef_label]</customLetterLabel>
              <customLetterText TKey="LetterTextAngryAnimal">The [animalKindDef_label] which was following [asker_nameFull] has arrived in the area.</customLetterText>
            </node>
            <elseNode Class="QuestNode_Sequence">
              <nodes>
                <li Class="QuestNode_GetAnimalKindByPoints" />
                <li Class="QuestNode_GeneratePawn">
                  <kindDef>$animalKindDef</kindDef>
                  <storeAs>peacefulAnimal</storeAs>
                </li>
                <li Class="QuestNode_PawnsArrive">
                  <pawns>$peacefulAnimal</pawns>
                  <customLetterLabel TKey="LetterLabelAnimalArrived">[animalKindDef_label] arrived</customLetterLabel>
                  <customLetterText TKey="LetterTextAnimalArrived">The [animalKindDef_label] that [asker_nameDef] was fleeing has arrived.\n\nIt turned out to be quite gentle and not aggressive at all.</customLetterText>
                </li>
              </nodes>
            </elseNode>
          </node>
        </li>
        
        <!-- Shuttle -->
        <li Class="QuestNode_ShuttleDelay">
          <delayTicks>7500</delayTicks>
          <lodgers>$asker</lodgers>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_SubScript">
                <def>Util_TransportShip_Pickup</def>
                <parms>
                  <leaveDelayTicks>45000</leaveDelayTicks>
                  <requiredPawns>$asker</requiredPawns>
                  <leaveImmediatelyWhenSatisfied>true</leaveImmediatelyWhenSatisfied>
                </parms>
              </li>
              <li Class="QuestNode_InspectString">
                <targets>$asker</targets>
                <inspectString TKey="InspectStringDepartShuttle">Should depart on shuttle</inspectString>
              </li>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelShuttleArrived">Shuttle arrived</label>
                <text TKey="LetterTextShuttleArrived">The shuttle has arrived to collect [asker_nameDef].</text>
                <lookTargets>$pickupShipThing</lookTargets>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Home faction -->
        <li Class="QuestNode_ExtraFaction">
          <pawns>$asker</pawns>
          <factionType>HomeFaction</factionType>
          <faction>Empire</faction>
          <inSignalRemovePawn>asker.RanWild</inSignalRemovePawn>
        </li>

        <!-- Lock his apparel -->
        <li Class="QuestNode_SetAllApparelLocked">
          <pawns>$asker</pawns>
        </li>

        <!-- Allow him to issue decrees -->
        <li Class="QuestNode_AllowDecreesForLodger">
          <lodger>$asker</lodger>
        </li>

        <!-- - - - - - - -  -->
        <!-- End conditions -->
        <!-- - - - - - - -  -->

        <!-- Asker died -->
        <li Class="QuestNode_Signal">
          <inSignal>asker.Destroyed</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelGuestDied">Guest died: {SUBJECT_definite}</label>
                <letterDef>NegativeEvent</letterDef>
                <text TKey="LetterTextGuestDied">{SUBJECT_definite}, who you were charged to protect, has died. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>QuestPawnLost</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Surgery Violation -->
        <li Class="QuestNode_Signal">
          <inSignal>asker.SurgeryViolation</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelUnauthorizedSurgery">Unauthorized surgery: {SUBJECT_definite}</label>
                <letterDef>NegativeEvent</letterDef>
                <text TKey="LetterTextUnauthorizedSurgery">Unauthorized, violating surgery has been performed on {SUBJECT_definite}, who you were charged to protect. Because of this violation, [asker_pronoun] will now attempt to leave. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>PerformedHarmfulSurgery</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Lodger's xenogerm absorbed -->
        <li Class="QuestNode_Signal" MayRequire="Ludeon.RimWorld.Biotech">
          <inSignal>asker.XenogermAbsorbed</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label>Xenogerm absorbed: {SUBJECT_definite}</label>
                <letterDef>NegativeEvent</letterDef>
                <text>{SUBJECT_definite}, who you were charged to protect, has had {SUBJECT_possessive} xenogerm forcibly absorbed. Because of this violation, {SUBJECT_pronoun} will now attempt to leave. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>XenogermAbsorbed</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Lodger arrested -->
        <li Class="QuestNode_Signal">
          <inSignal>asker.Arrested</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelCaptured">Captured: {SUBJECT_definite}</label>
                <letterDef>NegativeEvent</letterDef>
                <text TKey="LetterTextCaptured">{SUBJECT_definite}, who you were charged to host, has been arrested. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>QuestPawnArrested</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Asker left map -->
        <li Class="QuestNode_Signal">
          <inSignal>asker.LeftMap</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelGuestLost">Guest lost: {SUBJECT_definite}</label>
                <letterDef>NegativeEvent</letterDef>
                <text TKey="LetterTextGuestLost">{SUBJECT_definite}, who you were charged to protect, has left the designated settlement. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>QuestPawnLost</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Lodger ran wild -->
        <li Class="QuestNode_Signal">
          <inSignal>asker.RanWild</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelLodgerRanWild">Guest lost: {SUBJECT_definite}</label>
                <letterDef>NegativeEvent</letterDef>
                <text TKey="LetterTextLodgerRanWild">{SUBJECT_definite}, who you were charged to protect, has run wild. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>QuestPawnLost</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Shuttle destroyed -->
        <li Class="QuestNode_Signal">
          <inSignal>pickupShipThing.Destroyed</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelShuttleDestroyed">Shuttle destroyed</label>
                <letterDef>NegativeEvent</letterDef>
                <text TKey="LetterTextShuttleDestroyed">The shuttle sent to collect [asker_nameDef] has been destroyed. [asker_pronoun] will now leave on foot. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>ShuttleDestroyed</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Give honor to accepter (and development points if applicable) -->
        <li Class="QuestNode_GiveRoyalFavorAndDevelopmentPoints">
          <inSignal>pickupShipThing.SentSatisfied</inSignal>
          <giveToAccepter>true</giveToAccepter>
          <factionOf>$asker</factionOf>
          <amount>$royalFavorReward</amount>
          <isSingleReward>true</isSingleReward>
        </li>
        
        <!-- Shuttle sent -->
        <li Class="QuestNode_Signal">
          <inSignal>pickupShipThing.SentSatisfied</inSignal>
          <node Class="QuestNode_End">
            <outcome>Success</outcome>
            <sendStandardLetter>true</sendStandardLetter>
          </node>
        </li>
        <li Class="QuestNode_Signal">
          <inSignal>pickupShipThing.SentUnsatisfied</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelQuestFailed">Quest failed: [resolvedQuestName]</label>
                <letterDef>NegativeEvent</letterDef>
                <text TKey="LetterTextQuestFailed">The shuttle sent to collect [asker_nameDef] has departed without [asker_objective]. [asker_pronoun] will now leave on foot. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
                <goodwillChangeReason>MemberMissedShuttle</goodwillChangeReason>
              </li>
            </nodes>
          </node>
        </li>
      </nodes>
    </root>
  </QuestScriptDef>

</Defs>
